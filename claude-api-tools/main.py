from tools import BraveSearch, GitHubIntegration
from claude_assistant import ClaudeAssistant
import re
from datetime import datetime

def example_search():
    # Example using Brave Search
    search = BraveSearch()
    results = search.search("latest developments in quantum computing")
    formatted_results = search.format_results(results)
    print("Search Results:")
    print(formatted_results)
    
    # Use Claude to analyze the results
    claude = ClaudeAssistant()
    analysis = claude.ask(f"Please analyze these search results and provide a summary:\n{formatted_results}")
    print("\nClaude's Analysis:")
    print(analysis)

def generate_folder_name(description: str) -> str:
    """Generate a folder name based on the description"""
    # Remove special characters and convert to lowercase
    cleaned_name = re.sub(r'[^a-zA-Z0-9\s]', '', description.lower())
    # Replace spaces with underscores and limit length
    folder_name = re.sub(r'\s+', '_', cleaned_name)[:50]
    # Add timestamp to ensure uniqueness
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    return f"{folder_name}_{timestamp}"

def extract_python_code(text: str) -> str:
    """Extract only the Python code from Claude's response"""
    # Look for code between triple backticks
    code_match = re.search(r'```python\n(.+?)```', text, re.DOTALL)
    if code_match:
        return code_match.group(1).strip()
    
    # If no backticks, try to extract just the code parts
    # This is a simple heuristic that looks for valid Python lines
    lines = text.split('\n')
    code_lines = []
    for line in lines:
        # Skip obvious non-code lines
        if line.startswith(('#', 'Here', 'This', 'The', 'I', 'Let', 'Now')) or not line.strip():
            continue
        code_lines.append(line)
    
    return '\n'.join(code_lines)

def example_github():
    # Example using GitHub integration
    github = GitHubIntegration()
    claude = ClaudeAssistant()
    
    # Ask for code implementation with clear request for formatting
    code_prompt = (
        "Please provide a Python implementation of a bubble sort algorithm. "
        "Format your response as follows:\n"
        "1. Put the implementation code between ```python and ``` tags\n"
        "2. After the code, provide a detailed explanation of how it works\n"
        "3. Include example usage"
    )
    
    response = claude.ask(code_prompt)
    
    # Extract just the Python code
    code = extract_python_code(response)
    
    # Generate README with everything except the code
    readme_content = (
        "# Bubble Sort Implementation\n\n"
        "This implementation was generated by Claude AI.\n\n"
        "## Explanation\n\n"
        f"{response}\n"
    )
    
    # Create a descriptive folder name
    folder_name = generate_folder_name("bubble_sort")
    
    # Save both files to GitHub
    try:
        # Save the implementation file
        code_result = github.create_file(
            repo_name="berlinbra/ai-agent-projects",
            file_path=f"{folder_name}/implementation.py",
            content=code,
            commit_message="Add implementation"
        )
        
        # Save the README
        readme_result = github.create_file(
            repo_name="berlinbra/ai-agent-projects",
            file_path=f"{folder_name}/README.md",
            content=readme_content,
            commit_message="Add documentation"
        )
        
        print(f"\nFiles created in folder: {folder_name}")
        print("Code file:", code_result)
        print("README file:", readme_result)
        
    except Exception as e:
        print(f"Error: {e}")

def main():
    print("1. Search Example")
    print("2. GitHub Example")
    choice = input("Choose an example to run (1-2): ")
    
    if choice == '1':
        example_search()
    elif choice == '2':
        example_github()
    else:
        print("Invalid choice")

if __name__ == "__main__":
    main()
